using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using T3DSharpFramework.Engine;
using T3DSharpFramework.Engine.Util;
using T3DSharpFramework.Generated.Classes.Global;
using T3DSharpFramework.Generated.Classes.Reflection;
using T3DSharpFramework.Generated.Classes.Sim;
using T3DSharpFramework.Generated.Classes.Sim.Net;
using T3DSharpFramework.Generated.Enums.Global;
using T3DSharpFramework.Generated.Enums.Reflection;
using T3DSharpFramework.Generated.Structs.Global;
using T3DSharpFramework.Generated.Structs.Gui;
using T3DSharpFramework.Generated.Structs.Math;
using T3DSharpFramework.Interop;

namespace T3DSharpFramework.Generated.Classes.Sim {
    /// <summary>A datablock that specifies a Foot Switch effect.</summary>
    /// <description>
    /// A Foot Switch effect is used to disable some or all of the standard built-in footstep effects generated by Player objects.
    /// 
    /// Stock Player objects generate footprint decals, footstep sounds, and puffs of particle dust in response to special animation triggers embedded in the Player's dts model. With the help of Phase Effects, AFX can substitute alternatives for these built-in effects. When this is done, it is often preferable to turn off some or all of the built-in footstep effects.
    /// 
    /// Foot Switch effects are only meaningful when the primary position constraint is a Player or Player-derived object.
    /// </description>
    public unsafe class afxFootSwitchData : GameBaseData {
        public afxFootSwitchData(bool pRegister = false) 
            : base(pRegister) {
        }
        
        public afxFootSwitchData(string pName, bool pRegister) 
            : this(false) {
            Name = pName;
            if (pRegister) {
                RegisterObject();
            }
        }
        
        public afxFootSwitchData(string pName) 
            : this(pName, false) {
        }
        
        public afxFootSwitchData(string pName, string pParent, bool pRegister = false) 
            : this(pName, pRegister) {
            CopyFrom(Engine.Sim.FindObject<SimObject>(pParent));
        }
        
        public afxFootSwitchData(string pName, SimObject pParent, bool pRegister = false) 
            : this(pName, pRegister) {
            CopyFrom(pParent);
        }
        
        public afxFootSwitchData(SimObject pObj) 
            : base(pObj) {
        }
        
        public afxFootSwitchData(IntPtr pObj) 
            : base(pObj) {
        }
        
		protected override void CreateObjectPtr()
		{
			ObjectPtr = InternalUnsafeMethods.Create()(new InternalUnsafeMethods.Create__Args());
		}

        #region UnsafeNativeMethods
        new internal struct InternalUnsafeMethods {
            [StructLayout(LayoutKind.Sequential)]
            internal struct StaticGetType__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate IntPtr _StaticGetType(StaticGetType__Args args);
            private static _StaticGetType _StaticGetTypeFunc;
            internal static _StaticGetType StaticGetType() {
                if (_StaticGetTypeFunc == null) {
                    _StaticGetTypeFunc =
                        (_StaticGetType)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnafxFootSwitchData_staticGetType"), typeof(_StaticGetType));
                }
                
                return _StaticGetTypeFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct Create__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate IntPtr _Create(Create__Args args);
            private static _Create _CreateFunc;
            internal static _Create Create() {
                if (_CreateFunc == null) {
                    _CreateFunc =
                        (_Create)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnafxFootSwitchData_create"), typeof(_Create));
                }
                
                return _CreateFunc;
            }
        }
        #endregion

        /// <description>
        /// Get the type info object for the afxFootSwitchData class.
        /// </description>
        /// <returns>The type info object for afxFootSwitchData</returns>
        public static EngineTypeInfo StaticGetType() {
             InternalUnsafeMethods.StaticGetType__Args _args = new InternalUnsafeMethods.StaticGetType__Args() {
             };
             IntPtr _engineResult = InternalUnsafeMethods.StaticGetType()(_args);
             return new EngineTypeInfo(_engineResult);
        }


        /// <value>
        /// <description>
        /// When true, all of a Player's footstep effects are turned off for the duration of the foot-switch effect.
        /// </description>
        /// </value>
        public bool OverrideAll {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("overrideAll"));
            set => SetFieldValue("overrideAll", GenericMarshal.ToString(value));
        }


        /// <value>
        /// <description>
        /// Specifically selects whether the Player's footprint decals are enabled.
        /// </description>
        /// </value>
        public bool OverrideDecals {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("overrideDecals"));
            set => SetFieldValue("overrideDecals", GenericMarshal.ToString(value));
        }


        /// <value>
        /// <description>
        /// Specifically selects whether the Player's footstep sounds are enabled.
        /// </description>
        /// </value>
        public bool OverrideSounds {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("overrideSounds"));
            set => SetFieldValue("overrideSounds", GenericMarshal.ToString(value));
        }


        /// <value>
        /// <description>
        /// Specifically selects whether the Player's footstep puffs of dust are enabled.
        /// </description>
        /// </value>
        public bool OverrideDust {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("overrideDust"));
            set => SetFieldValue("overrideDust", GenericMarshal.ToString(value));
        }
    }
}